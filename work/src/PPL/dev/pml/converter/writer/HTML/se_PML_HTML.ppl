// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service PML_HTML

    function write_HTML_file ( document_node PML_document_node, config PML_to_HTML_config ) -> runtime_error or null
    
        const writer = text_file_writer.create_for_new_or_existing_file (
            file = i_config.HTML_output_file
            append_mode = no ) on_error:return_error
        
        const context = PML_HTML_writer_context.create ( writer )

        write_HTML_page_header ( context, document_node, config ) on_error:return_error
        
        const left_TOC = i_config.TOC_position =r PML_TOC_position.left
        
        if left_TOC then
            write_left_TOC_start ( context, document_node )
        .
        
        se_PML_document_formal_node.node.HTML_writer.write (
            node = i_document_node, context, i_config )

        if left_TOC then
            write_left_TOC_end ( context )
            write_split_panel_Javascript ( context )
        .

        write_TOC_Javascript ( context )

        write_HTML_page_footer ( context, config ) on_error:return_error
        
        return writer.try_close
    .
    
    functions access:private
        
        function write_left_TOC_start ( context PML_HTML_writer_context, document_node PML_document_node )
    
            context.write_indent_and_string_and_new_line ( '''<div class="pml-hsplit-panel">''' )
            context.increase_indent
    
            // TOC in left panel
            context.write_indent_and_string_and_new_line ( '''<div class="pml-hsplit-left-panel" id="PMLHsplitLeftPanel">''' )
            context.increase_indent
            se_PML_HTML_TOC.write_TOC ( document_node, context, max_level = 10 )
            context.decrease_indent
            context.write_indent_and_string_and_new_line ( "</div>" )
            
            // dragable split bar
            context.write_indent_and_string_and_new_line ( '''<div class="pml-hsplit-panel-separator" id="PMLHsplitPanelSeparator" draggable="true" ondragstart="PMLHsplitPanelSeparatorDragStart(event)" ondrag="PMLHsplitPanelSeparatorDragging(event)" ondragend="PMLHsplitPanelSeparatorDragEnd(event)"></div>''' )
    
            // content in right panel
            context.write_indent_and_string_and_new_line ( '''<div class="pml-hsplit-right-panel" id="PMLHsplitRightPanel">''' )
            context.increase_indent
            context.write_indent_and_string_and_new_line ( '''<div class="pml-hsplit-right-panel-content" id="PMLHsplitRightPanelContent">''' )
            context.increase_indent
        .
    
        function write_left_TOC_end ( context PML_HTML_writer_context )
    
            context.decrease_indent
            context.write_indent_and_string_and_new_line ( "</div>" ) // pml-hsplit-right-panel-content
    
            context.decrease_indent
            context.write_indent_and_string_and_new_line ( "</div>" ) // pml-hsplit-right-panel

            context.decrease_indent
            context.write_indent_and_string_and_new_line ( "</div>" ) // pml-hsplit-panel
        .
    
        function write_HTML_page_header -> runtime_error or null
            in context PML_HTML_writer_context
            in document_node PML_document_node
            in config PML_to_HTML_config
            
            if i_config.HTML_header as HTML_header is not null then
                const header_template = HTML_header.get on_error: return_error
                context.write ( adapt_HTML_page_header ( header_template, i_context, i_config, i_document_node ) )
            .

            context.increase_indent
            context.increase_indent
            
            return null
        .

        function adapt_HTML_page_header -> string
            in header_template string
            in context PML_HTML_writer_context
            in config PML_to_HTML_config
            in document_node PML_document_node

            const title = i_context.escape_HTML ( document_node.title )
            variable r = header_template.replace_first (
                to_replace = "[[=title]]"
                replace_by = title )

            r = r.replace_first (
                to_replace = "[[=PML_version]]"
                replace_by = se_PML_to_HTML_Converter.version )

            const head_end = mutable_string.create
            head_end.append_line ( '''        <link rel="stylesheet" href="css/pml-default.css">''' )
            // head_end.append_line ( '''        <link rel="stylesheet" href="css/pml-print-default.css" media="print">''' )
            case enum of i_config.source_code_highlighter
                when highlightjs
                    head_end.append_line (
                        '''        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/default.min.css">''' )
                when prism
                    head_end.append_line (
                        '''        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism.min.css">''' )
                when none
                    do nothing
            .
            r = r.replace_first (
                to_replace = "[[=head_end]]"
                replace_by = head_end.to_string )

            const body_start = mutable_string.create
            case enum of i_config.source_code_highlighter

                when highlightjs
                    body_start.append_line (
                        '''        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>''' )

                when prism
                    body_start.append_line (
                        '''        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/prism.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/plugins/autoloader/prism-autoloader.min.js"></script>''' )

                when none
                    do nothing
            .
            if body_start.is_empty then
                const temp = r.remove_all_substrings ( "[[=body_start]]" ) on_null: throw "impossible"
                r = temp
            else
                r = r.replace_first (
                    to_replace = "[[=body_start]]"
                    replace_by = body_start.to_string )
            .

            return r.to_string
        .

        function write_HTML_page_footer -> runtime_error or null
            in context PML_HTML_writer_context
            in config PML_to_HTML_config
        
            context.decrease_indent
            context.decrease_indent

            if i_config.HTML_footer as HTML_footer is not null then
                const footer_text = HTML_footer.get on_error: return_error
                context.write ( footer_text )
            .

            return null
        .
        
        function write_TOC_Javascript ( context PML_HTML_writer_context )
        
            context.write ( '''
        <script>
            var branch_prefixes = document.getElementsByClassName ( "pml-toc-branch-prefix" );
            
            for ( var i = 0; i < branch_prefixes.length; i++ ) {
                branch_prefixes[i].addEventListener ( "click", function ( event ) {
        
                    const sub_chapters = this.parentElement.parentElement.querySelector ( ".pml-toc-sub-chapters" );
                    sub_chapters.classList.toggle ( "pml-hidden" );
                    
                    if ( sub_chapters.classList.contains ( "pml-hidden" ) ) {
                        this.classList.remove ( "pml-toc-branch-visible" );
                        this.classList.add ( "pml-toc-branch-hidden" );
                    } else {
                        this.classList.remove ( "pml-toc-branch-hidden" );
                        this.classList.add ( "pml-toc-branch-visible" );
                    }
                });
            } 
        </script>
''' )
        .
        
        function write_split_panel_Javascript ( context PML_HTML_writer_context )
        
            context.write ( '''
        <script>
            window.onload = function() {
                adaptSplitWidths ( getCurrentElementWidth ( "PMLHsplitLeftPanel" ) );
            }
            
            var dragStartScreenX = 0;
            var dragStartLeftPanelWidth = 0;
            
            function PMLHsplitPanelSeparatorDragStart ( event ) {
    
                dragStartScreenX = event.screenX;
                dragStartLeftPanelWidth = getCurrentElementWidth ( "PMLHsplitLeftPanel" );
    
                // This is necessary to make dragging work in Firefox 
                // see https://stackoverflow.com/questions/19055264/why-doesnt-html5-drag-and-drop-work-in-firefox
                event.dataTransfer.setData ( 'text', 'anything' );
            }
            
            function PMLHsplitPanelSeparatorDragging ( event ) {
                
                // doesn't work in Firefox
                // adaptSplitWidths ( event.pageX );
                
                adaptSplitWidths ( dragStartLeftPanelWidth + event.screenX - dragStartScreenX );
            }
            
            function PMLHsplitPanelSeparatorDragEnd ( event ) {
                
                // doesn't work in Firefox
                // adaptSplitWidths ( event.pageX );
                
                adaptSplitWidths ( dragStartLeftPanelWidth + event.screenX - dragStartScreenX );
            }
    
            function adaptSplitWidths ( leftPanelWidth ) {
            
                setElementWidth ( "PMLHsplitLeftPanel", leftPanelWidth );
                
                // compute left margin of the right panel so that the content is displayed in the center of the browser window
                
                const bodyWidth = document.body.clientWidth;
                const contentMaxWidth = getCSSPropertyIntegerForID ( "PMLHsplitRightPanelContent", "max-width" );
                const separatorWidth = getCurrentElementWidth ( "PMLHsplitPanelSeparator" );
                
                let HsplitRightPanelLeftMargin = bodyWidth / 2 - contentMaxWidth / 2 - leftPanelWidth - separatorWidth;
                if ( HsplitRightPanelLeftMargin < 0 ) {
                    HsplitRightPanelLeftMargin = 0;
                }

                document.getElementById ( "PMLHsplitRightPanel" ).style.marginLeft = HsplitRightPanelLeftMargin + "px";
            }

            function getCurrentElementWidth ( elementID ) {
                
                const element = document.getElementById ( elementID );
                return element.getBoundingClientRect().width;
            }

            function setElementWidth ( elementID, width ) {
                
                const element = document.getElementById ( elementID );
                element.style.width = width + "px";
            }

            function getCSSPropertyIntegerForID ( elementID, CSSPropertyName ) {
                
                return parseInt ( getCSSPropertyForID ( elementID, CSSPropertyName ), 10 );
            }

            function getCSSPropertyForID ( elementID, CSSPropertyName ) {
                
                const element = document.getElementById ( elementID );
                const style = window.getComputedStyle ( element );
                return style.getPropertyValue ( CSSPropertyName );
            }
        </script>
''' )
        .
    .
.
