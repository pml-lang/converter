// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory PML_parameter_substitutor

    attributes access:private
        constants mutable_map<key:string, value:string> default:mutable_map<key:string, value:string>.create
    .

    function substitute_parameters_in_document
    
        a_constants.remove_all
    
        return substitute_non_parameter_node ( document_node )
    .

    functions access:private

        function substitute_non_parameter_node ( node PML_node_AST ) -> PML_node_AST  or PML_code_error
        
            const attributes = substitute_attribute_values ( i_node.attributes ) on_error:return_error
            const child_nodes = substitute_child_nodes ( i_node.child_nodes ) on_error:return_error
            const raw_text_content = substitute_text_content ( i_node.raw_text_content )
            return PML_node_AST.create (
                resource = i_node.resource
                tag = i_node.tag
                attributes,
                child_nodes,
                raw_text_content,
                formal_node = i_node.formal_node )
        .

        function substitute_child_nodes ( child_nodes indexed_list<PML_node_AST> or null ) \
            -> indexed_list<PML_node_AST> or null or PML_code_error
            
            if i_child_nodes is null then
                return null
            .

            const r = mutable_indexed_list<PML_node_AST>.create
            repeat for each child_node in child_nodes
                const new_child_node = substitute_child_node ( child_node ) on_error:return_error
                if new_child_node is not null then
                    r.append ( new_child_node )
                .
            .

            return r.make_immutable_or_null
        .

        function substitute_child_node ( node PML_node_AST ) -> PML_node_AST or null or PML_code_error
        
            if se_PML_standard_formal_nodes.constant.tags.contains ( i_node.tag.value ) then
                return add_constant ( i_node )
            else
                return substitute_non_parameter_node ( i_node )
            .
        .

        function substitute_attribute_values ( attributes map<key:string, value:PML_node_attribute_AST> or null ) \
            -> map<key:string, value:PML_node_attribute_AST> or null or PML_code_error
            
            if i_attributes is null then
                return null
            .
            
            const r = mutable_map<key:string, value:PML_node_attribute_AST>.create
            repeat for each value attribute in attributes
                const new_attribute = PML_node_attribute_AST.create (
                    id = attribute.id
                    value = PML_token.create (
                         value = substitute_parameters ( attribute.value.value )
                         position = attribute.value.position ) )
                r.add ( key = attribute.id.value, value = new_attribute )
            .
        
            return r.make_immutable
        . 
        
        function substitute_text_content ( text_content PML_token or null ) -> PML_token or null
        
            if i_text_content is null then
                return null
            else
                return PML_token.create (
                    value = substitute_parameters ( i_text_content.value )
                    position = text_content.position )
            .
        .

        function add_constant ( constant_node PML_node_AST ) -> PML_code_error or null
        
            const attributes = constant_node.attributes
            
            if attributes is null then
                return PML_code_error.create_for_node_AST_tag (
                    info = """A '{{constant_node.tag.value}}' must have a value assigned to the constant, e.g. {constant dir=foo/bar}"""
                    node_AST = i_constant_node )
            .
            
            if attributes.size #v 1 then
                return PML_code_error.create_for_node_AST_tag (
                    info ="""A '{{constant_node.tag.value}}' node can define only one parameter. But this node defines {{attributes.size}} parameters."""
                    node_AST = i_constant_node )
            .
            
            const attribute = attributes.iterator.next?.object
            assert attribute is not null
            
            const name = attribute.id.value

            if a_constants.contains_key ( name ) then
                return PML_code_error.create_for_token (
                    info = """Parameter '{{name}}' has already been defined earlier in the document."""
                    token = attribute.id
                    resource = constant_node.resource )
            .
            
            const value = substitute_parameters ( attribute.value.value )
            
            a_constants.add ( key = name, value )
        
            return null
        .
        
        function substitute_parameters ( string ) -> string
        
            // TD This could be made faster by parsing the string only once and 
            // replacing each occurrence of a parameter
        
            variable r = i_string
            repeat for each name, value in a_constants
                r = r.replace_all (
                    to_replace = """<<{{name}}>>"""
                    replace_by = value )
            .
//                    to_replace = """[[{{name}}]]"""

            // TD? check if there are undefined parameters in i_string (should depend on config)
            
            return r
        .
    .
    
    creator create kind:in_all
.
