// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

service CLI_start

///
    java_header
        import org.ppl.core.java.se_Java_starter_helper;
    end java_header

    java
        public static void main ( String[] args ) {
            se_Java_starter_helper.initAtApplicationLaunch ( args );
            start();
        }
    end java
.///

    attributes // access:private
        usage_text string = '''Command line usage:

pmlc [pml_file_path]
example:
   pmlc my_article.pml

or
pmlc [command] [parameters]?
Parameter syntax: --[name] [value]
examples:
   pmlc version
   pmlc convert --input_file my_article.pml --output_directory HTML_result

'''
    .

    function start

        const arguments = se_OS_process.command_line_arguments
        if arguments is null then
            OS.err.write_line ( a_usage_text )
            OS.err.write_line ( "Type 'pmlc help' for more information." )

            se_OS_process.exit_with_error
        .
        assert arguments is not null

        execute_command_line_arguments ( arguments ) (
            const result = result
            const allow_process_exit = allow_process_exit )

        case type of result

            when error e
                OS.err.write_line ( """Error: {{e.to_string}}""" )
                se_OS_process.exit_with_error

            otherwise
                if result is not null then
                    OS.out.write_line ( result.to_string )
                .
                if allow_process_exit then
                    se_OS_process.exit_with_success
                .
        .
    .

    functions access:private

        function execute_command_line_arguments
            in arguments indexed_list<string or null>
            out result any
            out allow_process_exit yes_no

            if arguments.size =v 1
                const single_argument = arguments.first
                if single_argument is null then
                    return result = invalid_string_data_error.create (
                        info = "The command line argument cannot be empty."
                        data = null ) \
                        allow_process_exit = yes
                .
                if single_argument.ends_with ( se_PML_default_values.PML_file_name_end ) then
                    return result = execute_PML_file_to_HTML_file ( file_path = single_argument ) \
                        allow_process_exit = yes
                .
            .

            se_PAIOM_command_executor.execute_command_line_arguments_3 (
                i_arguments
                commands = se_PML_PAIOM_commands.commands
                application_name = "PML converter" ) (
                const r = result
                const a = allow_process_exit_after_execution )
            return result = r, allow_process_exit = a
        .

        function execute_PML_file_to_HTML_file ( file_path string ) -> string or anticipated_error

            const HTML_file = se_PML_to_HTML_Converter.try_convert_PML_file_path_string ( i_file_path ) \
                on_error: return_error

            return se_PML_to_HTML_Converter.success_message ( HTML_file )
        .
    .
.
