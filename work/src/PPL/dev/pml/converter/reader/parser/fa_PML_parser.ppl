// SPDX-License-Identifier: GPL-2.0-only
// Copyright (C) 2018 - 2021 Christian Neumanns, email: chris@pml-lang.dev

factory PML_parser

    attributes access:private
    	
    	variable att tokenizer PML_tokenizer default: PML_tokenizer.create_for_code ( PML_code = "dummy" )
    .

    function try_parse

        const tokenizer = PML_tokenizer.try_create_for_code_supplier ( i_PML_code_supplier ) on_error: return_error
        return try_parse_with_tokenizer ( tokenizer )
    .
    
    function try_parse_file

        const tokenizer = PML_tokenizer.try_create_for_file ( i_file ) on_error: return_error
        return try_parse_with_tokenizer ( tokenizer )
    .
    
    function try_parse_code

        const tokenizer = PML_tokenizer.create_for_code ( i_PML_code )
        return try_parse_with_tokenizer ( tokenizer )
    .
    
    function try_parse_with_tokenizer

        a_tokenizer = i_tokenizer
        
        const root_nodes = try_require_root_nodes on_error:return_error
        
        if a_tokenizer.has_more_code then
            if a_tokenizer.consume_node_end_symbol then
                return error_at_current_position ( """All nodes have been closed already. The '{{a_tokenizer.config.node_end_symbol}}' at this position is superfluous.""" )
            else
                return error_at_current_position ( "Invalid text." )
            .
        .
        
        return PML_document_AST.create ( root_nodes )
    .
    

    functions access:private
    
        try_require_root_nodes -> indexed_list<PML_node_AST> or PML_code_error
        
            const nodes = try_parse_nodes
            if nodes is not null then
                return nodes
            .
            
            return error_at_current_position ( """No node found in the document. Every document must at least contain one '{{se_PML_standard_formal_nodes.document.standard_tag}}' node, starting with '{{a_tokenizer.config.node_start_symbol}}'.""" )
        .

        try_parse_nodes -> indexed_list<PML_node_AST> or null or PML_code_error
        
            const nodes = mutable_indexed_list<PML_node_AST>.create
            repeat forever

                a_tokenizer.try_skip_comments on_error:return_error

                const node = try_parse_node on_error:return_error
                if node is not null then
                    nodes.append ( node )
                else
                    exit repeat
                .
            .
            
            return nodes.make_immutable_or_null
        .

        try_parse_node -> PML_node_AST or null or PML_code_error
        
            const on_node_start = a_tokenizer.try_consume_node_start_symbol on_error:return_error

            if on_node_start then
                return try_require_non_text_node
            else
                return parse_text_node
            .
        .
        
        parse_text_node -> PML_node_AST or null
        
            const text = a_tokenizer.consume_text on_null: return null
            
            return PML_node_AST.create (
                resource = current_resource
                tag = PML_token.create (
                    value = se_PML_standard_formal_nodes.text.standard_tag
                    position = text.position )
                attributes = null
                child_nodes = null
                raw_text_content = text
                formal_node = se_PML_standard_formal_nodes.text )
        .
        
        try_require_non_text_node -> PML_node_AST or PML_code_error
        
            // { has been consumed already
        
            const tag = try_require_node_tag on_error:return_error

            const formal_node = se_PML_formal_node_registry.get_by_any_tag_or_null ( tag.value )
            if formal_node is null then
                return error_at_token (
                    info = """'{{tag.value}}' is an invalid node tag.
Valid tags are: {{se_PML_formal_node_registry.sorted_any_tag_list.to_long_string}}."""
                    token = tag )
            .
            
            const attributes = try_parse_node_attributes ( formal_node ) on_error:return_error
            
            if not se_formal_node.is_block_node_with_raw_text_content ( formal_node ) then
                const child_nodes = try_parse_nodes on_error:return_error
                try_parse_node_end_symbol ( tag ) on_error:return_error
                return PML_node_AST.create (
                    resource = current_resource
                    tag, attributes, child_nodes, raw_text_content = null,
                    formal_node )
            else
                const raw_text_content = a_tokenizer.try_consume_text_in_node_with_raw_text_content ( tag.value ) \
                    on_error:return_error
                try_parse_node_end_symbol ( tag ) on_error:return_error
                return PML_node_AST.create (
                    resource = current_resource
                    tag, attributes, child_nodes = null, raw_text_content,
                    formal_node )
            .
        .

        function try_parse_node_end_symbol ( tag PML_token ) -> PML_code_error or null
                
            if a_tokenizer.consume_node_end_symbol then
                return null
            else
                return error_at_current_position ( """Expecting '{{a_tokenizer.config.node_end_symbol}}' to close node '{{i_tag.value}}' started at {{i_tag.position.to_string}}.""" )
            .
        .
        
        try_require_node_tag -> PML_token or PML_code_error
        
            const tag = a_tokenizer.consume_node_name
            if tag is null then
                return error_at_current_position ( "Expecting a valid tag (name) for the node." )
            .
            
            a_tokenizer.skip_one_space_after_node_name
            
            return tag
        .
        
        
        // attributes
            
        try_parse_node_attributes ( formal_node PML_formal_node<*> ) \
            -> map<key:string, value:PML_node_attribute_AST> or null or PML_code_error
            
            if formal_node.attributes =r null and \
                not formal_node.HTML_attributes_allowed and \
                formal_node #r se_PML_standard_formal_nodes.constant then
                return null
            .
            
            const attributes = mutable_map<key:string, value:PML_node_attribute_AST>.create
            
            a_tokenizer.skip_spaces_and_tabs
            const has_parenthesis = a_tokenizer.consume_attributes_start_symbol
            
            if not has_parenthesis then
                const default_attribute = try_parse_default_attribute ( formal_node ) on_error:return_error
                if default_attribute is not null then
                    attributes.add ( key = default_attribute.id.value, value = default_attribute )
                .
            .
            
            repeat forever
            
                a_tokenizer.skip_spaces_and_tabs
                
                if has_parenthesis and a_tokenizer.consume_attributes_end_symbol then
                    exit repeat
                .
            
                const attribute = try_parse_node_attribute ( has_parenthesis ) on_error:return_error
                if attribute is null then
                    exit repeat
                .
                assert attribute is not null
                
                const key = attribute.id.value
                if attributes.contains_key ( key ) then
                    return error_at_token (
                        info = """Attribute '{{key}}' has already been defined."""
                        token = attribute.id )
                .

                attributes.add ( key, value = attribute )

                a_tokenizer.skip_line_continuation
            .
        
            return attributes.make_immutable_or_null
        .
        
        try_parse_node_attribute ( has_parenthesis yes_no ) -> PML_node_attribute_AST or null or PML_code_error
        
            const id = try_parse_node_attribute_id ( i_has_parenthesis ) \
                on_error: return_error \
                on_null: return null
            
            if not a_tokenizer.consume_attribute_id_value_separator then
                return error_at_current_position ( """Expecting attribute assignment operator '{{a_tokenizer.config.attribute_assignment_symbol}}'.""" )
            .

            const value = a_tokenizer.try_consume_attribute_value on_error: return_error
            if value is null then
                return error_at_current_position ( """Expecting a value assigned to attribute {{id.value}}.""" )
            .
            
            return PML_node_attribute_AST.create ( id, value )
        .
        
        try_parse_node_attribute_id ( has_parenthesis yes_no ) -> PML_token or null or PML_code_error
        
            if i_has_parenthesis then
                const id = a_tokenizer.consume_attribute_id
                if id is not null then
                    return id
                else
                    return error_at_current_position ( """Expecting an attribute id.""" )
                .
            else
                if not a_tokenizer.is_at_attribute_id_and_assignment_symbol then
                    return null
                .
                const id = a_tokenizer.consume_attribute_id
                assert id is not null
                return id
            .
        .
        
        try_parse_default_attribute ( formal_node PML_formal_node<*> ) \
            -> PML_node_attribute_AST or null or PML_code_error
            
            const default_attribute_id = formal_node.default_attribute_id on_null: return null

            a_tokenizer.skip_spaces_and_tabs
                
            if a_tokenizer.is_at_attribute_id_and_assignment_symbol then
                return null
            .
            
            const value = a_tokenizer.try_consume_attribute_value on_error: return_error on_null: return null
        
            return PML_node_attribute_AST.create (
                id = PML_token.create ( value = default_attribute_id.value, position = value.position )
                value )
        .
        
        
        current_resource -> non_error or null = a_tokenizer.current_resource
    
        // errors

        error_at_token ( info string, token PML_token ) -> PML_code_error =
            a_tokenizer.create_error ( info, position = i_token.position )

        error_at_current_position ( info string ) -> PML_code_error =
            a_tokenizer.create_error_at_current_position ( info )
    .

    creator create kind:in_all
.
